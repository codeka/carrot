plugins {
    id 'java'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly 'org.json:json:20170516'
    testCompile 'junit:junit:4.12'
    testCompile 'org.dmfs:iterators:1.5'
    testCompile 'com.google.truth:truth:0.31'
    testCompile 'org.json:json:20170516'
}

sourceSets {
    docs {
        java {
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

task buildJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    options.noTimestamp = true
    options.docTitle = "Carrot"
    options.windowTitle = "Carrot Javadoc"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task compileBuildDocs(dependsOn: ['classes'], type: JavaCompile) {
    source = sourceSets.docs.java.srcDirs
    classpath = sourceSets.docs.compileClasspath
    destinationDir = sourceSets.docs.output.classesDirs.singleFile
}

task buildDocs(dependsOn: ['compileBuildDocs', 'buildJavadoc'], type: JavaExec) {
    logging.captureStandardOutput LogLevel.INFO
    inputs.files file("src/docs/html"), sourceSets.docs.output.files
    outputs.dir file("$buildDir/docs")
    main "au.com.codeka.carrot.BuildDocs"
    classpath = sourceSets.main.runtimeClasspath + files(sourceSets.docs.output.classesDirs)
    args file("src/docs/html").absolutePath, file("$buildDir/docs").absolutePath
}

task carrotJar(type: Jar) {
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: buildJavadoc) {
    classifier = 'javadoc'
    from buildJavadoc.destinationDir
}

artifacts {
    archives carrotJar
    archives sourcesJar
    archives javadocJar
}

// Make sure the check task (that travis runs) depends on Jacoco
check.dependsOn jacocoTestReport

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'au.com.codeka'
            artifactId = 'carrot'
            version = VERSION_NAME

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Carrot'
                description = 'Carrot is a Jinja-like templating library for Java.'
                url = 'https://github.com/codeka/carrot'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'deanh'
                        name = 'Dean Harding'
                        email = 'dean@codeka.com.au'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:codeka/carrot.git'
                    developerConnection = 'scm:git:git://github.com:codeka/carrot.git'
                    url = 'https://github.com/codeka/carrot'
                }
            }
        }
    }
    repositories {
        maven {
            def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
            credentials {
                username hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ''
                password hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ''
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
